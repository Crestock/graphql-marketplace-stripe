## Users, Customers, Accounts.
type User {
  id: ID! @unique
  name: String!
  email: String! @unique
  customer: Customer! @relation(name: "Customer", onDelete: CASCADE)
  seller: Seller @relation(name: "Seller", onDelete: CASCADE)
  items: [Item] @relation(name: "ItemsByUser", onDelete: CASCADE)
}

type Customer {
  id: ID! @unique
  stripe_id: String! @unique
  has_open_disputes: Boolean! @default(value: false)
  user: User! @relation(name: "Customer")
}

enum SellerVerificationStatus {
  PENDING
  UNVERIFIED
  VERIFIED
}

type Seller {
  id: ID! @unique
  stripe_id: String! @unique
  country: String!
  commission_percentage: Int! @default(value: 10)
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String!
  verification_status: SellerVerificationStatus!
  user: User! @relation(name: "Seller")
}

## Transaction related objects and relationships.
type Item {
  id: ID! @unique
  price: Int!
  currency: String!
  seller: User! @relation(name: "ItemsByUser")
}

type Transaction {
  id: ID! @unique
  stripe_id: String! @unique
  items: [Item!]!
  buyer: User! @relation(name: "ItemBuyer")
  sellers: [User!]! @relation(name: "ItemSellers")
  amount: Int!
  amount_refunded: Int! @default(value: 0)
  presentment_currency: String!
  settlement_currency: String!
  exchange_rate: Float
  stripe_fee: Int!
  net_amount: Int!
  transfers: [Transfer!]!
  comission: Commission!
}

type Transfer {
  id: ID! @unique
  stripe_id: String! @unique
  recipient: User!
  transaction: Transaction!
  amount: Int!
  currency: String!
}

type Commission {
  id: ID! @unique
  amount: Int!
  net_amount: Int!
  currency: String!
  transaction: Transaction!
}
