# source: https://eu1.prisma.sh/thor-stripe/graphql-extend-rest/dev
# timestamp: Sat Feb 09 2019 17:07:00 GMT+0100 (Central European Standard Time)

type AggregateCustomer {
  count: Int!
}

type AggregateSeller {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Customer implements Node {
  id: ID!
  stripe_id: String!
  has_open_disputes: Boolean!
}

"""A connection to a list of items."""
type CustomerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  stripe_id: String!
  has_open_disputes: Boolean
}

input CustomerCreateOneInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

"""An edge in a connection."""
type CustomerEdge {
  """The item at the end of the edge."""
  node: Customer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  stripe_id_ASC
  stripe_id_DESC
  has_open_disputes_ASC
  has_open_disputes_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  stripe_id: String!
  has_open_disputes: Boolean!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
}

input CustomerUpdateDataInput {
  stripe_id: String
  has_open_disputes: Boolean
}

input CustomerUpdateInput {
  stripe_id: String
  has_open_disputes: Boolean
}

input CustomerUpdateManyMutationInput {
  stripe_id: String
  has_open_disputes: Boolean
}

input CustomerUpdateOneRequiredInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateDataInput
  upsert: CustomerUpsertNestedInput
}

input CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput!
  create: CustomerCreateInput!
}

input CustomerWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stripe_id: String

  """All values that are not equal to given value."""
  stripe_id_not: String

  """All values that are contained in given list."""
  stripe_id_in: [String!]

  """All values that are not contained in given list."""
  stripe_id_not_in: [String!]

  """All values less than the given value."""
  stripe_id_lt: String

  """All values less than or equal the given value."""
  stripe_id_lte: String

  """All values greater than the given value."""
  stripe_id_gt: String

  """All values greater than or equal the given value."""
  stripe_id_gte: String

  """All values containing the given string."""
  stripe_id_contains: String

  """All values not containing the given string."""
  stripe_id_not_contains: String

  """All values starting with the given string."""
  stripe_id_starts_with: String

  """All values not starting with the given string."""
  stripe_id_not_starts_with: String

  """All values ending with the given string."""
  stripe_id_ends_with: String

  """All values not ending with the given string."""
  stripe_id_not_ends_with: String
  has_open_disputes: Boolean

  """All values that are not equal to given value."""
  has_open_disputes_not: Boolean
}

input CustomerWhereUniqueInput {
  id: ID
  stripe_id: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createCustomer(data: CustomerCreateInput!): Customer!
  createSeller(data: SellerCreateInput!): Seller!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateSeller(data: SellerUpdateInput!, where: SellerWhereUniqueInput!): Seller
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteSeller(where: SellerWhereUniqueInput!): Seller
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  upsertSeller(where: SellerWhereUniqueInput!, create: SellerCreateInput!, update: SellerUpdateInput!): Seller!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  updateManySellers(data: SellerUpdateManyMutationInput!, where: SellerWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  deleteManySellers(where: SellerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  sellers(where: SellerWhereInput, orderBy: SellerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Seller]!
  user(where: UserWhereUniqueInput!): User
  customer(where: CustomerWhereUniqueInput!): Customer
  seller(where: SellerWhereUniqueInput!): Seller
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  sellersConnection(where: SellerWhereInput, orderBy: SellerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SellerConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Seller implements Node {
  id: ID!
  stripe_id: String!
  country: String!
  commission_percentage: Int!
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String!
  verification_status: SellerVerificationStatus!
}

"""A connection to a list of items."""
type SellerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SellerEdge]!
  aggregate: AggregateSeller!
}

input SellerCreateInput {
  stripe_id: String!
  country: String!
  commission_percentage: Int
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String!
  verification_status: SellerVerificationStatus!
}

input SellerCreateOneInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
}

"""An edge in a connection."""
type SellerEdge {
  """The item at the end of the edge."""
  node: Seller!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SellerOrderByInput {
  id_ASC
  id_DESC
  stripe_id_ASC
  stripe_id_DESC
  country_ASC
  country_DESC
  commission_percentage_ASC
  commission_percentage_DESC
  business_name_ASC
  business_name_DESC
  charges_enabled_ASC
  charges_enabled_DESC
  payouts_enabled_ASC
  payouts_enabled_DESC
  default_payout_currency_ASC
  default_payout_currency_DESC
  verification_status_ASC
  verification_status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SellerPreviousValues {
  id: ID!
  stripe_id: String!
  country: String!
  commission_percentage: Int!
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String!
  verification_status: SellerVerificationStatus!
}

type SellerSubscriptionPayload {
  mutation: MutationType!
  node: Seller
  updatedFields: [String!]
  previousValues: SellerPreviousValues
}

input SellerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SellerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SellerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SellerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SellerWhereInput
}

input SellerUpdateDataInput {
  stripe_id: String
  country: String
  commission_percentage: Int
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String
  verification_status: SellerVerificationStatus
}

input SellerUpdateInput {
  stripe_id: String
  country: String
  commission_percentage: Int
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String
  verification_status: SellerVerificationStatus
}

input SellerUpdateManyMutationInput {
  stripe_id: String
  country: String
  commission_percentage: Int
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String
  verification_status: SellerVerificationStatus
}

input SellerUpdateOneInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SellerUpdateDataInput
  upsert: SellerUpsertNestedInput
}

input SellerUpsertNestedInput {
  update: SellerUpdateDataInput!
  create: SellerCreateInput!
}

enum SellerVerificationStatus {
  PENDING
  UNVERIFIED
  VERIFIED
}

input SellerWhereInput {
  """Logical AND on all given filters."""
  AND: [SellerWhereInput!]

  """Logical OR on all given filters."""
  OR: [SellerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SellerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stripe_id: String

  """All values that are not equal to given value."""
  stripe_id_not: String

  """All values that are contained in given list."""
  stripe_id_in: [String!]

  """All values that are not contained in given list."""
  stripe_id_not_in: [String!]

  """All values less than the given value."""
  stripe_id_lt: String

  """All values less than or equal the given value."""
  stripe_id_lte: String

  """All values greater than the given value."""
  stripe_id_gt: String

  """All values greater than or equal the given value."""
  stripe_id_gte: String

  """All values containing the given string."""
  stripe_id_contains: String

  """All values not containing the given string."""
  stripe_id_not_contains: String

  """All values starting with the given string."""
  stripe_id_starts_with: String

  """All values not starting with the given string."""
  stripe_id_not_starts_with: String

  """All values ending with the given string."""
  stripe_id_ends_with: String

  """All values not ending with the given string."""
  stripe_id_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  commission_percentage: Int

  """All values that are not equal to given value."""
  commission_percentage_not: Int

  """All values that are contained in given list."""
  commission_percentage_in: [Int!]

  """All values that are not contained in given list."""
  commission_percentage_not_in: [Int!]

  """All values less than the given value."""
  commission_percentage_lt: Int

  """All values less than or equal the given value."""
  commission_percentage_lte: Int

  """All values greater than the given value."""
  commission_percentage_gt: Int

  """All values greater than or equal the given value."""
  commission_percentage_gte: Int
  business_name: String

  """All values that are not equal to given value."""
  business_name_not: String

  """All values that are contained in given list."""
  business_name_in: [String!]

  """All values that are not contained in given list."""
  business_name_not_in: [String!]

  """All values less than the given value."""
  business_name_lt: String

  """All values less than or equal the given value."""
  business_name_lte: String

  """All values greater than the given value."""
  business_name_gt: String

  """All values greater than or equal the given value."""
  business_name_gte: String

  """All values containing the given string."""
  business_name_contains: String

  """All values not containing the given string."""
  business_name_not_contains: String

  """All values starting with the given string."""
  business_name_starts_with: String

  """All values not starting with the given string."""
  business_name_not_starts_with: String

  """All values ending with the given string."""
  business_name_ends_with: String

  """All values not ending with the given string."""
  business_name_not_ends_with: String
  charges_enabled: Boolean

  """All values that are not equal to given value."""
  charges_enabled_not: Boolean
  payouts_enabled: Boolean

  """All values that are not equal to given value."""
  payouts_enabled_not: Boolean
  default_payout_currency: String

  """All values that are not equal to given value."""
  default_payout_currency_not: String

  """All values that are contained in given list."""
  default_payout_currency_in: [String!]

  """All values that are not contained in given list."""
  default_payout_currency_not_in: [String!]

  """All values less than the given value."""
  default_payout_currency_lt: String

  """All values less than or equal the given value."""
  default_payout_currency_lte: String

  """All values greater than the given value."""
  default_payout_currency_gt: String

  """All values greater than or equal the given value."""
  default_payout_currency_gte: String

  """All values containing the given string."""
  default_payout_currency_contains: String

  """All values not containing the given string."""
  default_payout_currency_not_contains: String

  """All values starting with the given string."""
  default_payout_currency_starts_with: String

  """All values not starting with the given string."""
  default_payout_currency_not_starts_with: String

  """All values ending with the given string."""
  default_payout_currency_ends_with: String

  """All values not ending with the given string."""
  default_payout_currency_not_ends_with: String
  verification_status: SellerVerificationStatus

  """All values that are not equal to given value."""
  verification_status_not: SellerVerificationStatus

  """All values that are contained in given list."""
  verification_status_in: [SellerVerificationStatus!]

  """All values that are not contained in given list."""
  verification_status_not_in: [SellerVerificationStatus!]
}

input SellerWhereUniqueInput {
  id: ID
  stripe_id: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  seller(where: SellerSubscriptionWhereInput): SellerSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  customer: Customer!
  seller: Seller
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  customer: CustomerCreateOneInput!
  seller: SellerCreateOneInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  customer: CustomerUpdateOneRequiredInput
  seller: SellerUpdateOneInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  customer: CustomerWhereInput
  seller: SellerWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
