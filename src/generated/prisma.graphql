# source: https://eu1.prisma.sh/thor-stripe/graphql-extend-rest/dev
# timestamp: Sun Feb 10 2019 11:25:14 GMT+0100 (Central European Standard Time)

type AggregateCommission {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateSeller {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateTransfer {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Commission implements Node {
  id: ID!
  amount: Int!
  currency: String!
  transaction: Transaction!
}

"""A connection to a list of items."""
type CommissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommissionEdge]!
  aggregate: AggregateCommission!
}

input CommissionCreateInput {
  amount: Int!
  currency: String!
  transaction: TransactionCreateOneWithoutComissionInput!
}

input CommissionCreateOneWithoutTransactionInput {
  create: CommissionCreateWithoutTransactionInput
  connect: CommissionWhereUniqueInput
}

input CommissionCreateWithoutTransactionInput {
  amount: Int!
  currency: String!
}

"""An edge in a connection."""
type CommissionEdge {
  """The item at the end of the edge."""
  node: Commission!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommissionOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  currency_ASC
  currency_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommissionPreviousValues {
  id: ID!
  amount: Int!
  currency: String!
}

type CommissionSubscriptionPayload {
  mutation: MutationType!
  node: Commission
  updatedFields: [String!]
  previousValues: CommissionPreviousValues
}

input CommissionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommissionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommissionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommissionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommissionWhereInput
}

input CommissionUpdateInput {
  amount: Int
  currency: String
  transaction: TransactionUpdateOneRequiredWithoutComissionInput
}

input CommissionUpdateManyMutationInput {
  amount: Int
  currency: String
}

input CommissionUpdateOneRequiredWithoutTransactionInput {
  create: CommissionCreateWithoutTransactionInput
  connect: CommissionWhereUniqueInput
  update: CommissionUpdateWithoutTransactionDataInput
  upsert: CommissionUpsertWithoutTransactionInput
}

input CommissionUpdateWithoutTransactionDataInput {
  amount: Int
  currency: String
}

input CommissionUpsertWithoutTransactionInput {
  update: CommissionUpdateWithoutTransactionDataInput!
  create: CommissionCreateWithoutTransactionInput!
}

input CommissionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommissionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  transaction: TransactionWhereInput
}

input CommissionWhereUniqueInput {
  id: ID
}

type Customer implements Node {
  id: ID!
  stripe_id: String!
  has_open_disputes: Boolean!
}

"""A connection to a list of items."""
type CustomerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  stripe_id: String!
  has_open_disputes: Boolean
}

input CustomerCreateOneInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

"""An edge in a connection."""
type CustomerEdge {
  """The item at the end of the edge."""
  node: Customer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  stripe_id_ASC
  stripe_id_DESC
  has_open_disputes_ASC
  has_open_disputes_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  stripe_id: String!
  has_open_disputes: Boolean!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
}

input CustomerUpdateDataInput {
  stripe_id: String
  has_open_disputes: Boolean
}

input CustomerUpdateInput {
  stripe_id: String
  has_open_disputes: Boolean
}

input CustomerUpdateManyMutationInput {
  stripe_id: String
  has_open_disputes: Boolean
}

input CustomerUpdateOneRequiredInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateDataInput
  upsert: CustomerUpsertNestedInput
}

input CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput!
  create: CustomerCreateInput!
}

input CustomerWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stripe_id: String

  """All values that are not equal to given value."""
  stripe_id_not: String

  """All values that are contained in given list."""
  stripe_id_in: [String!]

  """All values that are not contained in given list."""
  stripe_id_not_in: [String!]

  """All values less than the given value."""
  stripe_id_lt: String

  """All values less than or equal the given value."""
  stripe_id_lte: String

  """All values greater than the given value."""
  stripe_id_gt: String

  """All values greater than or equal the given value."""
  stripe_id_gte: String

  """All values containing the given string."""
  stripe_id_contains: String

  """All values not containing the given string."""
  stripe_id_not_contains: String

  """All values starting with the given string."""
  stripe_id_starts_with: String

  """All values not starting with the given string."""
  stripe_id_not_starts_with: String

  """All values ending with the given string."""
  stripe_id_ends_with: String

  """All values not ending with the given string."""
  stripe_id_not_ends_with: String
  has_open_disputes: Boolean

  """All values that are not equal to given value."""
  has_open_disputes_not: Boolean
}

input CustomerWhereUniqueInput {
  id: ID
  stripe_id: String
}

type Item implements Node {
  id: ID!
  price: Int!
  currency: String!
  seller: User!
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  price: Int!
  currency: String!
  seller: UserCreateOneInput!
}

input ItemCreateManyInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  currency_ASC
  currency_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemPreviousValues {
  id: ID!
  price: Int!
  currency: String!
}

input ItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateDataInput {
  price: Int
  currency: String
  seller: UserUpdateOneRequiredInput
}

input ItemUpdateInput {
  price: Int
  currency: String
  seller: UserUpdateOneRequiredInput
}

input ItemUpdateManyDataInput {
  price: Int
  currency: String
}

input ItemUpdateManyInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueNestedInput!]
}

input ItemUpdateManyMutationInput {
  price: Int
  currency: String
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateDataInput!
}

input ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateDataInput!
  create: ItemCreateInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  seller: UserWhereInput
}

input ItemWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createTransaction(data: TransactionCreateInput!): Transaction!
  createTransfer(data: TransferCreateInput!): Transfer!
  createCommission(data: CommissionCreateInput!): Commission!
  createSeller(data: SellerCreateInput!): Seller!
  createItem(data: ItemCreateInput!): Item!
  createCustomer(data: CustomerCreateInput!): Customer!
  createUser(data: UserCreateInput!): User!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateTransfer(data: TransferUpdateInput!, where: TransferWhereUniqueInput!): Transfer
  updateCommission(data: CommissionUpdateInput!, where: CommissionWhereUniqueInput!): Commission
  updateSeller(data: SellerUpdateInput!, where: SellerWhereUniqueInput!): Seller
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteTransfer(where: TransferWhereUniqueInput!): Transfer
  deleteCommission(where: CommissionWhereUniqueInput!): Commission
  deleteSeller(where: SellerWhereUniqueInput!): Seller
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteUser(where: UserWhereUniqueInput!): User
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  upsertTransfer(where: TransferWhereUniqueInput!, create: TransferCreateInput!, update: TransferUpdateInput!): Transfer!
  upsertCommission(where: CommissionWhereUniqueInput!, create: CommissionCreateInput!, update: CommissionUpdateInput!): Commission!
  upsertSeller(where: SellerWhereUniqueInput!, create: SellerCreateInput!, update: SellerUpdateInput!): Seller!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  updateManyTransfers(data: TransferUpdateManyMutationInput!, where: TransferWhereInput): BatchPayload!
  updateManyCommissions(data: CommissionUpdateManyMutationInput!, where: CommissionWhereInput): BatchPayload!
  updateManySellers(data: SellerUpdateManyMutationInput!, where: SellerWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  deleteManyTransfers(where: TransferWhereInput): BatchPayload!
  deleteManyCommissions(where: CommissionWhereInput): BatchPayload!
  deleteManySellers(where: SellerWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transfers(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transfer]!
  commissions(where: CommissionWhereInput, orderBy: CommissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Commission]!
  sellers(where: SellerWhereInput, orderBy: SellerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Seller]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transfer(where: TransferWhereUniqueInput!): Transfer
  commission(where: CommissionWhereUniqueInput!): Commission
  seller(where: SellerWhereUniqueInput!): Seller
  item(where: ItemWhereUniqueInput!): Item
  customer(where: CustomerWhereUniqueInput!): Customer
  user(where: UserWhereUniqueInput!): User
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  transfersConnection(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransferConnection!
  commissionsConnection(where: CommissionWhereInput, orderBy: CommissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommissionConnection!
  sellersConnection(where: SellerWhereInput, orderBy: SellerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SellerConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Seller implements Node {
  id: ID!
  stripe_id: String!
  country: String!
  commission_percentage: Int!
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String!
  verification_status: SellerVerificationStatus!
}

"""A connection to a list of items."""
type SellerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SellerEdge]!
  aggregate: AggregateSeller!
}

input SellerCreateInput {
  stripe_id: String!
  country: String!
  commission_percentage: Int
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String!
  verification_status: SellerVerificationStatus!
}

input SellerCreateOneInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
}

"""An edge in a connection."""
type SellerEdge {
  """The item at the end of the edge."""
  node: Seller!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SellerOrderByInput {
  id_ASC
  id_DESC
  stripe_id_ASC
  stripe_id_DESC
  country_ASC
  country_DESC
  commission_percentage_ASC
  commission_percentage_DESC
  business_name_ASC
  business_name_DESC
  charges_enabled_ASC
  charges_enabled_DESC
  payouts_enabled_ASC
  payouts_enabled_DESC
  default_payout_currency_ASC
  default_payout_currency_DESC
  verification_status_ASC
  verification_status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SellerPreviousValues {
  id: ID!
  stripe_id: String!
  country: String!
  commission_percentage: Int!
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String!
  verification_status: SellerVerificationStatus!
}

type SellerSubscriptionPayload {
  mutation: MutationType!
  node: Seller
  updatedFields: [String!]
  previousValues: SellerPreviousValues
}

input SellerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SellerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SellerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SellerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SellerWhereInput
}

input SellerUpdateDataInput {
  stripe_id: String
  country: String
  commission_percentage: Int
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String
  verification_status: SellerVerificationStatus
}

input SellerUpdateInput {
  stripe_id: String
  country: String
  commission_percentage: Int
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String
  verification_status: SellerVerificationStatus
}

input SellerUpdateManyMutationInput {
  stripe_id: String
  country: String
  commission_percentage: Int
  business_name: String
  charges_enabled: Boolean
  payouts_enabled: Boolean
  default_payout_currency: String
  verification_status: SellerVerificationStatus
}

input SellerUpdateOneInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SellerUpdateDataInput
  upsert: SellerUpsertNestedInput
}

input SellerUpsertNestedInput {
  update: SellerUpdateDataInput!
  create: SellerCreateInput!
}

enum SellerVerificationStatus {
  PENDING
  UNVERIFIED
  VERIFIED
}

input SellerWhereInput {
  """Logical AND on all given filters."""
  AND: [SellerWhereInput!]

  """Logical OR on all given filters."""
  OR: [SellerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SellerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stripe_id: String

  """All values that are not equal to given value."""
  stripe_id_not: String

  """All values that are contained in given list."""
  stripe_id_in: [String!]

  """All values that are not contained in given list."""
  stripe_id_not_in: [String!]

  """All values less than the given value."""
  stripe_id_lt: String

  """All values less than or equal the given value."""
  stripe_id_lte: String

  """All values greater than the given value."""
  stripe_id_gt: String

  """All values greater than or equal the given value."""
  stripe_id_gte: String

  """All values containing the given string."""
  stripe_id_contains: String

  """All values not containing the given string."""
  stripe_id_not_contains: String

  """All values starting with the given string."""
  stripe_id_starts_with: String

  """All values not starting with the given string."""
  stripe_id_not_starts_with: String

  """All values ending with the given string."""
  stripe_id_ends_with: String

  """All values not ending with the given string."""
  stripe_id_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  commission_percentage: Int

  """All values that are not equal to given value."""
  commission_percentage_not: Int

  """All values that are contained in given list."""
  commission_percentage_in: [Int!]

  """All values that are not contained in given list."""
  commission_percentage_not_in: [Int!]

  """All values less than the given value."""
  commission_percentage_lt: Int

  """All values less than or equal the given value."""
  commission_percentage_lte: Int

  """All values greater than the given value."""
  commission_percentage_gt: Int

  """All values greater than or equal the given value."""
  commission_percentage_gte: Int
  business_name: String

  """All values that are not equal to given value."""
  business_name_not: String

  """All values that are contained in given list."""
  business_name_in: [String!]

  """All values that are not contained in given list."""
  business_name_not_in: [String!]

  """All values less than the given value."""
  business_name_lt: String

  """All values less than or equal the given value."""
  business_name_lte: String

  """All values greater than the given value."""
  business_name_gt: String

  """All values greater than or equal the given value."""
  business_name_gte: String

  """All values containing the given string."""
  business_name_contains: String

  """All values not containing the given string."""
  business_name_not_contains: String

  """All values starting with the given string."""
  business_name_starts_with: String

  """All values not starting with the given string."""
  business_name_not_starts_with: String

  """All values ending with the given string."""
  business_name_ends_with: String

  """All values not ending with the given string."""
  business_name_not_ends_with: String
  charges_enabled: Boolean

  """All values that are not equal to given value."""
  charges_enabled_not: Boolean
  payouts_enabled: Boolean

  """All values that are not equal to given value."""
  payouts_enabled_not: Boolean
  default_payout_currency: String

  """All values that are not equal to given value."""
  default_payout_currency_not: String

  """All values that are contained in given list."""
  default_payout_currency_in: [String!]

  """All values that are not contained in given list."""
  default_payout_currency_not_in: [String!]

  """All values less than the given value."""
  default_payout_currency_lt: String

  """All values less than or equal the given value."""
  default_payout_currency_lte: String

  """All values greater than the given value."""
  default_payout_currency_gt: String

  """All values greater than or equal the given value."""
  default_payout_currency_gte: String

  """All values containing the given string."""
  default_payout_currency_contains: String

  """All values not containing the given string."""
  default_payout_currency_not_contains: String

  """All values starting with the given string."""
  default_payout_currency_starts_with: String

  """All values not starting with the given string."""
  default_payout_currency_not_starts_with: String

  """All values ending with the given string."""
  default_payout_currency_ends_with: String

  """All values not ending with the given string."""
  default_payout_currency_not_ends_with: String
  verification_status: SellerVerificationStatus

  """All values that are not equal to given value."""
  verification_status_not: SellerVerificationStatus

  """All values that are contained in given list."""
  verification_status_in: [SellerVerificationStatus!]

  """All values that are not contained in given list."""
  verification_status_not_in: [SellerVerificationStatus!]
}

input SellerWhereUniqueInput {
  id: ID
  stripe_id: String
}

type Subscription {
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  transfer(where: TransferSubscriptionWhereInput): TransferSubscriptionPayload
  commission(where: CommissionSubscriptionWhereInput): CommissionSubscriptionPayload
  seller(where: SellerSubscriptionWhereInput): SellerSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Transaction implements Node {
  id: ID!
  stripe_id: String!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
  buyer: User!
  sellers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  amount: Int!
  amount_refunded: Int!
  presentment_currency: String!
  settlement_currency: String!
  exchange_rate: Float
  stripe_fee: Int!
  net_amount: Int!
  transfers(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transfer!]
  comission: Commission!
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  stripe_id: String!
  amount: Int!
  amount_refunded: Int
  presentment_currency: String!
  settlement_currency: String!
  exchange_rate: Float
  stripe_fee: Int!
  net_amount: Int!
  items: ItemCreateManyInput
  buyer: UserCreateOneInput!
  sellers: UserCreateManyInput
  transfers: TransferCreateManyWithoutTransactionInput
  comission: CommissionCreateOneWithoutTransactionInput!
}

input TransactionCreateOneWithoutComissionInput {
  create: TransactionCreateWithoutComissionInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateOneWithoutTransfersInput {
  create: TransactionCreateWithoutTransfersInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateWithoutComissionInput {
  stripe_id: String!
  amount: Int!
  amount_refunded: Int
  presentment_currency: String!
  settlement_currency: String!
  exchange_rate: Float
  stripe_fee: Int!
  net_amount: Int!
  items: ItemCreateManyInput
  buyer: UserCreateOneInput!
  sellers: UserCreateManyInput
  transfers: TransferCreateManyWithoutTransactionInput
}

input TransactionCreateWithoutTransfersInput {
  stripe_id: String!
  amount: Int!
  amount_refunded: Int
  presentment_currency: String!
  settlement_currency: String!
  exchange_rate: Float
  stripe_fee: Int!
  net_amount: Int!
  items: ItemCreateManyInput
  buyer: UserCreateOneInput!
  sellers: UserCreateManyInput
  comission: CommissionCreateOneWithoutTransactionInput!
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  stripe_id_ASC
  stripe_id_DESC
  amount_ASC
  amount_DESC
  amount_refunded_ASC
  amount_refunded_DESC
  presentment_currency_ASC
  presentment_currency_DESC
  settlement_currency_ASC
  settlement_currency_DESC
  exchange_rate_ASC
  exchange_rate_DESC
  stripe_fee_ASC
  stripe_fee_DESC
  net_amount_ASC
  net_amount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  stripe_id: String!
  amount: Int!
  amount_refunded: Int!
  presentment_currency: String!
  settlement_currency: String!
  exchange_rate: Float
  stripe_fee: Int!
  net_amount: Int!
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
}

input TransactionUpdateInput {
  stripe_id: String
  amount: Int
  amount_refunded: Int
  presentment_currency: String
  settlement_currency: String
  exchange_rate: Float
  stripe_fee: Int
  net_amount: Int
  items: ItemUpdateManyInput
  buyer: UserUpdateOneRequiredInput
  sellers: UserUpdateManyInput
  transfers: TransferUpdateManyWithoutTransactionInput
  comission: CommissionUpdateOneRequiredWithoutTransactionInput
}

input TransactionUpdateManyMutationInput {
  stripe_id: String
  amount: Int
  amount_refunded: Int
  presentment_currency: String
  settlement_currency: String
  exchange_rate: Float
  stripe_fee: Int
  net_amount: Int
}

input TransactionUpdateOneRequiredWithoutComissionInput {
  create: TransactionCreateWithoutComissionInput
  connect: TransactionWhereUniqueInput
  update: TransactionUpdateWithoutComissionDataInput
  upsert: TransactionUpsertWithoutComissionInput
}

input TransactionUpdateOneRequiredWithoutTransfersInput {
  create: TransactionCreateWithoutTransfersInput
  connect: TransactionWhereUniqueInput
  update: TransactionUpdateWithoutTransfersDataInput
  upsert: TransactionUpsertWithoutTransfersInput
}

input TransactionUpdateWithoutComissionDataInput {
  stripe_id: String
  amount: Int
  amount_refunded: Int
  presentment_currency: String
  settlement_currency: String
  exchange_rate: Float
  stripe_fee: Int
  net_amount: Int
  items: ItemUpdateManyInput
  buyer: UserUpdateOneRequiredInput
  sellers: UserUpdateManyInput
  transfers: TransferUpdateManyWithoutTransactionInput
}

input TransactionUpdateWithoutTransfersDataInput {
  stripe_id: String
  amount: Int
  amount_refunded: Int
  presentment_currency: String
  settlement_currency: String
  exchange_rate: Float
  stripe_fee: Int
  net_amount: Int
  items: ItemUpdateManyInput
  buyer: UserUpdateOneRequiredInput
  sellers: UserUpdateManyInput
  comission: CommissionUpdateOneRequiredWithoutTransactionInput
}

input TransactionUpsertWithoutComissionInput {
  update: TransactionUpdateWithoutComissionDataInput!
  create: TransactionCreateWithoutComissionInput!
}

input TransactionUpsertWithoutTransfersInput {
  update: TransactionUpdateWithoutTransfersDataInput!
  create: TransactionCreateWithoutTransfersInput!
}

input TransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stripe_id: String

  """All values that are not equal to given value."""
  stripe_id_not: String

  """All values that are contained in given list."""
  stripe_id_in: [String!]

  """All values that are not contained in given list."""
  stripe_id_not_in: [String!]

  """All values less than the given value."""
  stripe_id_lt: String

  """All values less than or equal the given value."""
  stripe_id_lte: String

  """All values greater than the given value."""
  stripe_id_gt: String

  """All values greater than or equal the given value."""
  stripe_id_gte: String

  """All values containing the given string."""
  stripe_id_contains: String

  """All values not containing the given string."""
  stripe_id_not_contains: String

  """All values starting with the given string."""
  stripe_id_starts_with: String

  """All values not starting with the given string."""
  stripe_id_not_starts_with: String

  """All values ending with the given string."""
  stripe_id_ends_with: String

  """All values not ending with the given string."""
  stripe_id_not_ends_with: String
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  amount_refunded: Int

  """All values that are not equal to given value."""
  amount_refunded_not: Int

  """All values that are contained in given list."""
  amount_refunded_in: [Int!]

  """All values that are not contained in given list."""
  amount_refunded_not_in: [Int!]

  """All values less than the given value."""
  amount_refunded_lt: Int

  """All values less than or equal the given value."""
  amount_refunded_lte: Int

  """All values greater than the given value."""
  amount_refunded_gt: Int

  """All values greater than or equal the given value."""
  amount_refunded_gte: Int
  presentment_currency: String

  """All values that are not equal to given value."""
  presentment_currency_not: String

  """All values that are contained in given list."""
  presentment_currency_in: [String!]

  """All values that are not contained in given list."""
  presentment_currency_not_in: [String!]

  """All values less than the given value."""
  presentment_currency_lt: String

  """All values less than or equal the given value."""
  presentment_currency_lte: String

  """All values greater than the given value."""
  presentment_currency_gt: String

  """All values greater than or equal the given value."""
  presentment_currency_gte: String

  """All values containing the given string."""
  presentment_currency_contains: String

  """All values not containing the given string."""
  presentment_currency_not_contains: String

  """All values starting with the given string."""
  presentment_currency_starts_with: String

  """All values not starting with the given string."""
  presentment_currency_not_starts_with: String

  """All values ending with the given string."""
  presentment_currency_ends_with: String

  """All values not ending with the given string."""
  presentment_currency_not_ends_with: String
  settlement_currency: String

  """All values that are not equal to given value."""
  settlement_currency_not: String

  """All values that are contained in given list."""
  settlement_currency_in: [String!]

  """All values that are not contained in given list."""
  settlement_currency_not_in: [String!]

  """All values less than the given value."""
  settlement_currency_lt: String

  """All values less than or equal the given value."""
  settlement_currency_lte: String

  """All values greater than the given value."""
  settlement_currency_gt: String

  """All values greater than or equal the given value."""
  settlement_currency_gte: String

  """All values containing the given string."""
  settlement_currency_contains: String

  """All values not containing the given string."""
  settlement_currency_not_contains: String

  """All values starting with the given string."""
  settlement_currency_starts_with: String

  """All values not starting with the given string."""
  settlement_currency_not_starts_with: String

  """All values ending with the given string."""
  settlement_currency_ends_with: String

  """All values not ending with the given string."""
  settlement_currency_not_ends_with: String
  exchange_rate: Float

  """All values that are not equal to given value."""
  exchange_rate_not: Float

  """All values that are contained in given list."""
  exchange_rate_in: [Float!]

  """All values that are not contained in given list."""
  exchange_rate_not_in: [Float!]

  """All values less than the given value."""
  exchange_rate_lt: Float

  """All values less than or equal the given value."""
  exchange_rate_lte: Float

  """All values greater than the given value."""
  exchange_rate_gt: Float

  """All values greater than or equal the given value."""
  exchange_rate_gte: Float
  stripe_fee: Int

  """All values that are not equal to given value."""
  stripe_fee_not: Int

  """All values that are contained in given list."""
  stripe_fee_in: [Int!]

  """All values that are not contained in given list."""
  stripe_fee_not_in: [Int!]

  """All values less than the given value."""
  stripe_fee_lt: Int

  """All values less than or equal the given value."""
  stripe_fee_lte: Int

  """All values greater than the given value."""
  stripe_fee_gt: Int

  """All values greater than or equal the given value."""
  stripe_fee_gte: Int
  net_amount: Int

  """All values that are not equal to given value."""
  net_amount_not: Int

  """All values that are contained in given list."""
  net_amount_in: [Int!]

  """All values that are not contained in given list."""
  net_amount_not_in: [Int!]

  """All values less than the given value."""
  net_amount_lt: Int

  """All values less than or equal the given value."""
  net_amount_lte: Int

  """All values greater than the given value."""
  net_amount_gt: Int

  """All values greater than or equal the given value."""
  net_amount_gte: Int
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  buyer: UserWhereInput
  sellers_every: UserWhereInput
  sellers_some: UserWhereInput
  sellers_none: UserWhereInput
  transfers_every: TransferWhereInput
  transfers_some: TransferWhereInput
  transfers_none: TransferWhereInput
  comission: CommissionWhereInput
}

input TransactionWhereUniqueInput {
  id: ID
  stripe_id: String
}

type Transfer implements Node {
  id: ID!
  stripe_id: String!
  recipient: User!
  transaction: Transaction!
  amount: Int!
  currency: String!
}

"""A connection to a list of items."""
type TransferConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransferEdge]!
  aggregate: AggregateTransfer!
}

input TransferCreateInput {
  stripe_id: String!
  amount: Int!
  currency: String!
  recipient: UserCreateOneInput!
  transaction: TransactionCreateOneWithoutTransfersInput!
}

input TransferCreateManyWithoutTransactionInput {
  create: [TransferCreateWithoutTransactionInput!]
  connect: [TransferWhereUniqueInput!]
}

input TransferCreateWithoutTransactionInput {
  stripe_id: String!
  amount: Int!
  currency: String!
  recipient: UserCreateOneInput!
}

"""An edge in a connection."""
type TransferEdge {
  """The item at the end of the edge."""
  node: Transfer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TransferOrderByInput {
  id_ASC
  id_DESC
  stripe_id_ASC
  stripe_id_DESC
  amount_ASC
  amount_DESC
  currency_ASC
  currency_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TransferPreviousValues {
  id: ID!
  stripe_id: String!
  amount: Int!
  currency: String!
}

input TransferScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TransferScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransferScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransferScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stripe_id: String

  """All values that are not equal to given value."""
  stripe_id_not: String

  """All values that are contained in given list."""
  stripe_id_in: [String!]

  """All values that are not contained in given list."""
  stripe_id_not_in: [String!]

  """All values less than the given value."""
  stripe_id_lt: String

  """All values less than or equal the given value."""
  stripe_id_lte: String

  """All values greater than the given value."""
  stripe_id_gt: String

  """All values greater than or equal the given value."""
  stripe_id_gte: String

  """All values containing the given string."""
  stripe_id_contains: String

  """All values not containing the given string."""
  stripe_id_not_contains: String

  """All values starting with the given string."""
  stripe_id_starts_with: String

  """All values not starting with the given string."""
  stripe_id_not_starts_with: String

  """All values ending with the given string."""
  stripe_id_ends_with: String

  """All values not ending with the given string."""
  stripe_id_not_ends_with: String
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
}

type TransferSubscriptionPayload {
  mutation: MutationType!
  node: Transfer
  updatedFields: [String!]
  previousValues: TransferPreviousValues
}

input TransferSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransferSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransferSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransferSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TransferWhereInput
}

input TransferUpdateInput {
  stripe_id: String
  amount: Int
  currency: String
  recipient: UserUpdateOneRequiredInput
  transaction: TransactionUpdateOneRequiredWithoutTransfersInput
}

input TransferUpdateManyDataInput {
  stripe_id: String
  amount: Int
  currency: String
}

input TransferUpdateManyMutationInput {
  stripe_id: String
  amount: Int
  currency: String
}

input TransferUpdateManyWithoutTransactionInput {
  create: [TransferCreateWithoutTransactionInput!]
  connect: [TransferWhereUniqueInput!]
  set: [TransferWhereUniqueInput!]
  disconnect: [TransferWhereUniqueInput!]
  delete: [TransferWhereUniqueInput!]
  update: [TransferUpdateWithWhereUniqueWithoutTransactionInput!]
  updateMany: [TransferUpdateManyWithWhereNestedInput!]
  deleteMany: [TransferScalarWhereInput!]
  upsert: [TransferUpsertWithWhereUniqueWithoutTransactionInput!]
}

input TransferUpdateManyWithWhereNestedInput {
  where: TransferScalarWhereInput!
  data: TransferUpdateManyDataInput!
}

input TransferUpdateWithoutTransactionDataInput {
  stripe_id: String
  amount: Int
  currency: String
  recipient: UserUpdateOneRequiredInput
}

input TransferUpdateWithWhereUniqueWithoutTransactionInput {
  where: TransferWhereUniqueInput!
  data: TransferUpdateWithoutTransactionDataInput!
}

input TransferUpsertWithWhereUniqueWithoutTransactionInput {
  where: TransferWhereUniqueInput!
  update: TransferUpdateWithoutTransactionDataInput!
  create: TransferCreateWithoutTransactionInput!
}

input TransferWhereInput {
  """Logical AND on all given filters."""
  AND: [TransferWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransferWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransferWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stripe_id: String

  """All values that are not equal to given value."""
  stripe_id_not: String

  """All values that are contained in given list."""
  stripe_id_in: [String!]

  """All values that are not contained in given list."""
  stripe_id_not_in: [String!]

  """All values less than the given value."""
  stripe_id_lt: String

  """All values less than or equal the given value."""
  stripe_id_lte: String

  """All values greater than the given value."""
  stripe_id_gt: String

  """All values greater than or equal the given value."""
  stripe_id_gte: String

  """All values containing the given string."""
  stripe_id_contains: String

  """All values not containing the given string."""
  stripe_id_not_contains: String

  """All values starting with the given string."""
  stripe_id_starts_with: String

  """All values not starting with the given string."""
  stripe_id_not_starts_with: String

  """All values ending with the given string."""
  stripe_id_ends_with: String

  """All values not ending with the given string."""
  stripe_id_not_ends_with: String
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  recipient: UserWhereInput
  transaction: TransactionWhereInput
}

input TransferWhereUniqueInput {
  id: ID
  stripe_id: String
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  customer: Customer!
  seller: Seller
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  customer: CustomerCreateOneInput!
  seller: SellerCreateOneInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  customer: CustomerUpdateOneRequiredInput
  seller: SellerUpdateOneInput
}

input UserUpdateInput {
  name: String
  email: String
  customer: CustomerUpdateOneRequiredInput
  seller: SellerUpdateOneInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  customer: CustomerWhereInput
  seller: SellerWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
